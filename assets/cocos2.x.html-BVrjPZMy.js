import{_ as s,c as a,a as e,o as p}from"./app-4GEhonSJ.js";const t="/minigame-canvas-engine/assets/image-1-DBJ5OeRH.png",o="/minigame-canvas-engine/assets/image-84Lz73IE.png",c="/minigame-canvas-engine/assets/image-2-Bd1tABUn.png",l={};function i(r,n){return p(),a("div",null,n[0]||(n[0]=[e('<h1 id="cocos2-x版本适配" tabindex="-1"><a class="header-anchor" href="#cocos2-x版本适配"><span>cocos2.x版本适配</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Cocos Creator 2.x 自带支持开放数据域开发，详情可见<a href="https://docs.cocos.com/creator/2.4/manual/zh/publish/publish-wechatgame-sub-domain.html" target="_blank" rel="noopener noreferrer">文档</a>。</p><p>Cocos Creator 2.x 对开放数据域的支持原理为开放数据域同样为一个完整的 Cocos 项目，在主域通过 <code>SubContextView</code> 组件来实现开放数据域的绘制和更新等逻辑。使用 Cocos 来开发开放数据域好处在于在开放数据域也是一个完整的游戏引擎在驱动，因此可以有更丰富的 UI 效果，但弊端也不少，比如 开放数据域也需要一个引擎、每次调试需要构建等，因此 Cocos Creator 3.x 开放数据域开发方案换成了 Layout 方案，详情可见<a href="https://docs.cocos.com/creator/manual/zh/editor/publish/build-open-data-context.html" target="_blank" rel="noopener noreferrer">文档</a>。</p><p>实际上，Cocos Creator 2.x 同样支持使用 Layout 来开发开放数据域，本文详细介绍。</p><h2 id="适配流程" tabindex="-1"><a class="header-anchor" href="#适配流程"><span>适配流程</span></a></h2><h3 id="_1-项目创建" tabindex="-1"><a class="header-anchor" href="#_1-项目创建"><span>1. 项目创建</span></a></h3><p>本文采用 Cocos Creator 2.4.11 版本 ，低版本的处理大同小异。</p><p>示例很简单，添加一个精灵，精灵挂载 <code>SubContextView</code> 组件和 一个自定义脚本(<code>Rank</code>)，如下图所示。 <img src="'+t+`" alt="Alt text"></p><p>挂载了<code>SubContextView</code>组件之后，按照 Cocos 默认的流程，会自动给开放数据域发送几个事件：viewport、boot、frameRate然后开放数据域的 Cocos 工程会根据这些事件做一些处理保证游戏主域和开放数据域配合工作（核心是事件处理）。</p><p>如果使用 Layout 来处理开放数据域，我们忽略这些 Cocos 的事件，通过挂载的自定义脚本来处理。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> property <span class="token punctuation">}</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span>_decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">@ccclass</span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">NewClass</span> <span class="token keyword">extends</span> <span class="token class-name">cc<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 开放数据域用 Layout 来实现，必须告诉 Layout 开放数据域最终被绘制到屏幕上的包围盒</span>
<span class="line">     * 比如 iPhone 12 Pro Max 的物理尺寸是 414 * 896，如果开放数据域的尺寸是 200 * 200，绘制在屏幕正中央</span>
<span class="line">     * 那么最终包围盒是<span class="token punctuation">{</span> x: 107, y: 348, width: 200, height: 200 <span class="token punctuation">}</span></span>
<span class="line">     * 但在 Cocos 中是跟 Cocos 的坐标系打交道，因此要将 Cocos 的坐标系换算成木屏幕坐标系，坐标原点为左上角</span>
<span class="line">     * 下面是参考转换逻辑</span>
<span class="line">     */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 返回节点在世界坐标系下的对齐轴向的包围盒（AABB），这个包围盒是相对于设计尺寸的</span></span>
<span class="line">    <span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">getBoundingBoxToWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Cocos 的屏幕适配规则，详情可见：https://docs.cocos.com/creator/2.4/manual/zh/ui/multi-resolution.html?h=%E9%80%82%E9%85%8D</span></span>
<span class="line">    <span class="token keyword">const</span> scaleX <span class="token operator">=</span> cc<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> scaleY <span class="token operator">=</span> cc<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">getScaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> devicePixelRatio <span class="token operator">=</span> cc<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">getDevicePixelRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设计尺寸</span></span>
<span class="line">    <span class="token keyword">const</span> designSize <span class="token operator">=</span> cc<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">getDesignResolutionSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// canvas 画布的尺寸</span></span>
<span class="line">    <span class="token keyword">const</span> vireportRect <span class="token operator">=</span> cc<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">getViewportRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Cocos 实际的场景在 Canvas 画布中的偏移，比如按照 fixWidth 的适配规则而屏幕有比较长的话，最终渲染出来屏幕上下是有黑边的，这里计算的就是黑边的大小</span></span>
<span class="line">    <span class="token keyword">const</span> offsetY <span class="token operator">=</span> <span class="token punctuation">(</span>vireportRect<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token punctuation">(</span>designSize<span class="token punctuation">.</span>height <span class="token operator">*</span> scaleY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> offsetX <span class="token operator">=</span> <span class="token punctuation">(</span>vireportRect<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token punctuation">(</span>designSize<span class="token punctuation">.</span>width <span class="token operator">*</span> scaleX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将计算出来的相对屏幕的包围盒信息发送给开放数据域，开放数据域根据这个事件来初始化</span></span>
<span class="line">    window<span class="token punctuation">.</span>__globalAdapter <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>__globalAdapter<span class="token punctuation">.</span><span class="token function">getOpenDataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;layoutUpdateViewPort&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>x <span class="token operator">*</span> scaleX<span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">)</span> <span class="token operator">/</span> devicePixelRatio<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">(</span>box<span class="token punctuation">.</span>y <span class="token operator">*</span> scaleY <span class="token operator">+</span> offsetY<span class="token punctuation">)</span> <span class="token operator">/</span> devicePixelRatio<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">width</span><span class="token operator">:</span> box<span class="token punctuation">.</span>width <span class="token operator">*</span> scaleX <span class="token operator">/</span> devicePixelRatio<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">height</span><span class="token operator">:</span> box<span class="token punctuation">.</span>height <span class="token operator">*</span> scaleY <span class="token operator">/</span> devicePixelRatio<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-项目打包" tabindex="-1"><a class="header-anchor" href="#_2-项目打包"><span>2. 项目打包</span></a></h3><p>打包构建只需要在构建时填写个开放数据域代码目录即可，到此 Cocos 工程内的工作已经结束。 <img src="`+o+`" alt="Alt text"></p><h3 id="_3-开放数据域工程" tabindex="-1"><a class="header-anchor" href="#_3-开放数据域工程"><span>3. 开放数据域工程</span></a></h3><p>开放数据域工程放在 <code>openDataContext</code> 目录，直接使用 Cocos Creator 3.x 版本生成的开放数据域模板经过简单魔改即可，</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">__env<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 注释的部分为 Cocos Creator 3.x 逻辑</span></span>
<span class="line">  <span class="token comment">// if ( data.type === &#39;engine&#39; &amp;&amp; data.event === &#39;viewport&#39; ) {</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>event <span class="token operator">===</span> <span class="token string">&#39;layoutUpdateViewPort&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">updateViewPort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过魔改的开放数据域目录可见 <a href="https://github.com/wechat-miniprogram/minigame-canvas-engine/tree/master/demos/cocos2.x_demo/build/wechatgame/openDataContext" target="_blank" rel="noopener noreferrer">openDataContext</a>，最后的运行效果如下：</p><p><img src="`+c+'" alt="Alt text"></p><p>经过改造后，开放数据域的所有调试都可以在微信开发者工具内实现，不需要在 Cocos 打包单独的开放数据域工程，同时 <code>openDataContext</code> 目录内的 engine.js 也可以删除，通过 <a href="../overview/plugin">微信小游戏插件</a>的方式引用。</p><p>完成工程可见<a href="https://github.com/wechat-miniprogram/minigame-canvas-engine/tree/master/demos/cocos2.x_demo" target="_blank" rel="noopener noreferrer">cocos2.x_demo</a></p>',21)]))}const d=s(l,[["render",i],["__file","cocos2.x.html.vue"]]),k=JSON.parse('{"path":"/tutorial/cocos2.x.html","title":"cocos2.x版本适配","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"适配流程","slug":"适配流程","link":"#适配流程","children":[{"level":3,"title":"1. 项目创建","slug":"_1-项目创建","link":"#_1-项目创建","children":[]},{"level":3,"title":"2. 项目打包","slug":"_2-项目打包","link":"#_2-项目打包","children":[]},{"level":3,"title":"3. 开放数据域工程","slug":"_3-开放数据域工程","link":"#_3-开放数据域工程","children":[]}]}],"git":{"updatedTime":1729783599000},"filePathRelative":"tutorial/cocos2.x.md"}');export{d as comp,k as data};
