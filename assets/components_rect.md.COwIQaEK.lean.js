import{_ as s,c as i,a2 as e,o as a}from"./chunks/framework.DMeVfvck.js";const c=JSON.parse('{"title":"Rect","description":"","frontmatter":{},"headers":[],"relativePath":"components/rect.md","filePath":"components/rect.md","lastUpdated":1732266705000}'),n={name:"components/rect.md"};function h(r,t,l,d,p,k){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="rect" tabindex="-1">Rect <a class="header-anchor" href="#rect" aria-label="Permalink to &quot;Rect&quot;">​</a></h1><p>一个 Rect 代表一个矩形。</p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>Number</td><td>矩形的宽度</td></tr><tr><td>height</td><td>Number</td><td>矩形的高度</td></tr><tr><td>left</td><td>Number</td><td>矩形 X 轴上的最小值</td></tr><tr><td>right</td><td>Number</td><td>矩形 X 轴上的最大值</td></tr><tr><td>top</td><td>Number</td><td>矩形 Y 轴上的最小值</td></tr><tr><td>bottom</td><td>Number</td><td>矩形 Y 轴上的最大值</td></tr></tbody></table><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="set-left-number-top-number-width-number-height-number" tabindex="-1">set(left: number, top: number, width: number, height: number) <a class="header-anchor" href="#set-left-number-top-number-width-number-height-number" aria-label="Permalink to &quot;set(left: number, top: number, width: number, height: number)&quot;">​</a></h3><p>更新矩形的相关信息。</p><h3 id="intersects-rect-rect-boolean" tabindex="-1">intersects(rect: Rect): boolean <a class="header-anchor" href="#intersects-rect-rect-boolean" aria-label="Permalink to &quot;intersects(rect: Rect): boolean&quot;">​</a></h3><p>判断两个矩形是否相交</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Layout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Layout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect2));</span></span></code></pre></div>`,10)]))}const b=s(n,[["render",h]]);export{c as __pageData,b as default};
