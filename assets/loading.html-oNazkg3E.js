import{_ as t,c as e,a as p,b as n,d as s,o as l}from"./app-DcXP98t8.js";const o={};function c(i,a){return l(),e("div",null,a[0]||(a[0]=[p(`<h1 id="加载中效果实现" tabindex="-1"><a class="header-anchor" href="#加载中效果实现"><span>加载中效果实现</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在小游戏开放数据域场景下，需要异步加载好友数据然后渲染，由于开放数据域加载成功事件并不能抛给游戏主域，所以并不能实现游戏主域播放加载动画然后在开放数据域加载完成后隐藏加载动画，因此，只能在开放数据域实现简单的加载动画。</p><p>实际上，借助 Layout 的 transform 样式属性，实现简单的加载中效果并不难，本文介绍如何实现简单的加载中效果。</p><div class="hint-container tip"><p class="hint-container-title">兼容性</p><p>v1.0.5版本开始支持 transform。</p></div><h2 id="完整流程" tabindex="-1"><a class="header-anchor" href="#完整流程"><span>完整流程</span></a></h2><h3 id="布局和样式编写" tabindex="-1"><a class="header-anchor" href="#布局和样式编写"><span>布局和样式编写</span></a></h3><p>布局非常简单，只需要新建个容器，容器内有个静态图片，图片居中展示。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://mmgame.qpic.cn/image/3d1e23022b2ffe0a5dc046c10428d5826c383042d8e993706fa1d630aa3917fd/0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">justifyContent</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">alignItems</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现图片的每帧旋转" tabindex="-1"><a class="header-anchor" href="#实现图片的每帧旋转"><span>实现图片的每帧旋转</span></a></h3><p>这里我们借助 ticker 能力和 transform 的旋转能力实现每帧都旋转，这样就能够得到一个旋转中的加载图了，下面的示例每一帧旋转2度，要加快速度按需调整即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> image <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;loading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> degrees <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">Layout<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  degrees <span class="token operator">=</span> <span class="token punctuation">(</span>degrees <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span><span class="token punctuation">;</span></span>
<span class="line">  image<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>degrees<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>        </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在线示例" tabindex="-1"><a class="header-anchor" href="#在线示例"><span>在线示例</span></a></h3>`,14),n("iframe",{height:"508.888916015625",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/yuanzm/embed/jOQvWLz?default-tab=html%2Cresult&editable=true",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},[s(" See the Pen "),n("a",{href:"https://codepen.io/yuanzm/pen/jOQvWLz"}," Untitled"),s(" by yuanzm ("),n("a",{href:"https://codepen.io/yuanzm"},"@yuanzm"),s(") on "),n("a",{href:"https://codepen.io"},"CodePen"),s(". ")],-1),p(`<h3 id="函数封装" tabindex="-1"><a class="header-anchor" href="#函数封装"><span>函数封装</span></a></h3><p>在小游戏场景下，可以将上述行为封装为一个函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 通过插件的方式引用 Layout</span></span>
<span class="line"><span class="token keyword">const</span> Layout <span class="token operator">=</span> <span class="token function">requirePlugin</span><span class="token punctuation">(</span><span class="token string">&#39;Layout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> sharedCanvas <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getSharedCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> sharedContext <span class="token operator">=</span> sharedCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;100%&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;100%&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">justifyContent</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">alignItems</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token number">75</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> tpl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">&lt;view id=&quot;container&quot;&gt;</span>
<span class="line">  &lt;image src=&quot;sub/images/loading.png&quot; id=&quot;loading&quot;&gt;&lt;/image&gt;</span>
<span class="line">&lt;/view&gt;</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Layout<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Layout<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Layout<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>sharedContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> image <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;loading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> degrees <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  Layout<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    degrees <span class="token operator">=</span> <span class="token punctuation">(</span>degrees <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span><span class="token punctuation">;</span></span>
<span class="line">    image<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>degrees<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>        </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过封装，只需要在加载数据之前额外调用 <code>showLoading</code> 函数就能够实现加载中的效果，对原先的流程无需改造。</p><div class="hint-container tip"><p class="hint-container-title">温馨提示</p><p>小游戏开放数据域不能用网络图片，只能用本地图片，且图片路径不用带 ./ 前缀。</p></div>`,5)]))}const u=t(o,[["render",c],["__file","loading.html.vue"]]),d=JSON.parse('{"path":"/tutorial/loading.html","title":"加载中效果实现","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"完整流程","slug":"完整流程","link":"#完整流程","children":[{"level":3,"title":"布局和样式编写","slug":"布局和样式编写","link":"#布局和样式编写","children":[]},{"level":3,"title":"实现图片的每帧旋转","slug":"实现图片的每帧旋转","link":"#实现图片的每帧旋转","children":[]},{"level":3,"title":"在线示例","slug":"在线示例","link":"#在线示例","children":[]},{"level":3,"title":"函数封装","slug":"函数封装","link":"#函数封装","children":[]}]}],"git":{"updatedTime":1729782728000},"filePathRelative":"tutorial/loading.md"}');export{u as comp,d as data};
