import{_ as p,r as c,o as i,c as l,a,b as n,d as t,w as e,e as o}from"./app-af1e9e55.js";const u={},d=a("h1",{id:"layout",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#layout","aria-hidden":"true"},"#"),n(" Layout")],-1),r=a("p",null,[n("Layout 是一个单例，给定 template 和 style 最终渲染到画布一般要经过 "),a("code",null,"Layout.clear"),n("、"),a("code",null,"Layout.init"),n(" 和 "),a("code",null,"Layout.layout"),n(" 三个步骤，除了这三个方法，还有一些方法挂载在 Layout，下面一一介绍。")],-1),k=a("h2",{id:"version",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#version","aria-hidden":"true"},"#"),n(" version")],-1),m=a("code",null,"1.0.2",-1),h=o(`<p>文档有写 API 会标明兼容性，兼容性版本号就是指代 Layout.version 。</p><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear</h2><p>清理画布，之前的计算出来的渲染树也会一并清理，此时可以再次执行<code>init</code>和<code>layout</code>方法渲染界面。</p><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h2><p>Layout.init(template: string, style: object)</p><p>给定 template 和 style，计算布局、生成节点树等逻辑。</p><h2 id="layout-1" tabindex="-1"><a class="header-anchor" href="#layout-1" aria-hidden="true">#</a> layout</h2><p>Layout.layout(context: CanvasRenderingContext2D)</p><p>将节点树绘制在 canvas 画布上，并会执行事件绑定等逻辑。</p><h2 id="updateviewport" tabindex="-1"><a class="header-anchor" href="#updateviewport" aria-hidden="true">#</a> updateViewPort</h2><p>Layout.updateViewPort(Object box)</p><p>更新被绘制canvas的窗口信息，本渲染引擎并不关心是否会和其他游戏引擎共同使用，而本身又需要支持事件处理，因此，如果被渲染内容是绘制到离屏canvas，需要将最终绘制在屏幕上 的绝对尺寸和位置信息更新到本渲染引擎。</p><h3 id="box" tabindex="-1"><a class="header-anchor" href="#box" aria-hidden="true">#</a> box</h3><table><thead><tr><th>key</th><th>类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>Number</td><td>是</td><td>canvas的物理像素宽度</td></tr><tr><td>heigth</td><td>Number</td><td>是</td><td>canvas的物理像素高度</td></tr><tr><td>x</td><td>Number</td><td>是</td><td>canvas 距离屏幕左上角的物理像素x坐标</td></tr><tr><td>y</td><td>Number</td><td>是</td><td>canvas 距离屏幕左上角的物理像素y坐标</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">特别提示</p><p>这一步非常重要，决定了点击、滑动等事件能否正确处理。</p></div><p>在 <strong>Web 模式下</strong>，可以直接调用 Web 的API取得Canvas在屏幕中的位置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Layout<span class="token punctuation">.</span><span class="token function">updateViewPort</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="getelementviewportrect" tabindex="-1"><a class="header-anchor" href="#getelementviewportrect" aria-hidden="true">#</a> getElementViewportRect</h2>`,18),v=o(`<div class="custom-container tip"><p class="custom-container-title">兼容性</p><p>v1.0.1版本开始支持</p></div><p>返回一个节点在屏幕中的位置和尺寸信息，前提是正确调用updateViewPort，这在某些场景很有用，比如在小游戏里面，游戏的主域也是用 Layout 开发的，开放数据域是通过 Canvas 组件来绘，可以调用 Layout.getElementViewportRect 拿到 Canvas 组件在屏幕中的物理坐标和尺寸信息，以方便开放数据域做好事件处理。</p><h2 id="clearall" tabindex="-1"><a class="header-anchor" href="#clearall" aria-hidden="true">#</a> clearAll</h2><p>比起 Layout.clear 更彻底的清理，会清空图片对象池，减少内存占用。</p><h2 id="loadimgs" tabindex="-1"><a class="header-anchor" href="#loadimgs" aria-hidden="true">#</a> loadImgs</h2><p>Layout.loadImgs(Array imgarr): Promise</p><p>对于图片资源，如果不提前加载，渲染过程中可能出现挨个出现图片效果，影响体验。通过Layout.loadImgs可以预加载图片资源，在调用Layout.layout的时候渲染性能更好，体验更佳。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注意图片路径不需要加./作为前缀，以小游戏根目录作为根目录</span>
Layout<span class="token punctuation">.</span><span class="token function">loadImgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string">&#39;sub/Buffet_icon_GiftPlate_0.png&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;sub/Buffet_icon_GiftPlate.png&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;sub/UI_Icon_Rating.png&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;所有资源加载完成&#39;</span><span class="token punctuation">)</span>；
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="registbitmapfont" tabindex="-1"><a class="header-anchor" href="#registbitmapfont" aria-hidden="true">#</a> registBitMapFont</h2><p>Layout.registBitMapFont(name, src, config)</p><p>注册 bitmaptext 可用的字体。</p><table><thead><tr><th>keyName</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>字体的名称</td></tr><tr><td>src</td><td>string</td><td>bitMapFont字体的图片链接</td></tr><tr><td>config</td><td>string</td><td>BitMapFont的配置信息</td></tr></tbody></table>`,12),b=a("iframe",{height:"599.1077270507812",style:{width:"100%"},scrolling:"no",title:"Layout BitMapText",src:"https://codepen.io/yuanzm/embed/LYgGvQm?default-tab=html%2Cresult&editable=true",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/yuanzm/pen/LYgGvQm">
  Layout BitMapText</a> by yuanzm (<a href="https://codepen.io/yuanzm">@yuanzm</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),g=a("h2",{id:"getelementsbyid",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#getelementsbyid","aria-hidden":"true"},"#"),n(" getElementsById")],-1),y=o(`<p>获取元素id为<strong>elementId</strong>的一组节点，之所以是一组节点是因为这里 id 的实现没有对齐 Web，id并不是唯一的，只是一个标识。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;view id=&quot;container&quot;&gt;&lt;/view&gt;</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getelementbyid" tabindex="-1"><a class="header-anchor" href="#getelementbyid" aria-hidden="true">#</a> getElementById</h2><div class="custom-container tip"><p class="custom-container-title">兼容性</p><p>v1.0.1版本开始支持</p></div>`,4),f=o(`<p>获取元素id为<strong>elementId</strong>的第一个节点，id唯一性由业务侧自行保证。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;view id=&quot;container&quot;&gt;&lt;/view&gt;</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getelementsbyclassname" tabindex="-1"><a class="header-anchor" href="#getelementsbyclassname" aria-hidden="true">#</a> getElementsByClassName</h2>`,3),L=o(`<p>获取包含class为<strong>className</strong>的一组元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * &lt;view id=&quot;container&quot;&gt;
    &lt;view class=&quot;item&quot;&gt;&lt;/view&gt;
    &lt;view class=&quot;item&quot;&gt;&lt;/view&gt;
    &lt;view class=&quot;item&quot;&gt;&lt;/view&gt;
   &lt;/view&gt;
 */</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clonenode" tabindex="-1"><a class="header-anchor" href="#clonenode" aria-hidden="true">#</a> cloneNode</h2>`,3),_=o(`<p>克隆节点，克隆后的节点可以添加到 Layout 的某个节点中，该方法可以在数据有变化的时候避免重新执行 Layout.init 流程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// 获取 ScrollView</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 对列表第一项进行深度拷贝</span>
<span class="token keyword">const</span> listItem <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;listItem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listItem1 <span class="token operator">=</span> listItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newListItem1 <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span>listItem1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 针对拷贝后的子节点做一些魔改</span>
<span class="token keyword">const</span> listItemNum <span class="token operator">=</span> newListItem1<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;listItemNum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
listItemNum<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listItemName <span class="token operator">=</span> newListItem1<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;listItemName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
listItemName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;zim test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listItemScore <span class="token operator">=</span> newListItem1<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;listItemScore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
listItemScore<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 将拷贝后的节点也添加到滚动列表</span>
list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newListItem1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x=a("iframe",{height:"634.6032409667969",style:{width:"100%"},scrolling:"no",title:"Layout CloneNode",src:"https://codepen.io/yuanzm/embed/oNaxvPv?default-tab=html%2Cresult&editable=true",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/yuanzm/pen/oNaxvPv">
  Layout CloneNode</a> by yuanzm (<a href="https://codepen.io/yuanzm">@yuanzm</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),w=o(`<h2 id="ticker" tabindex="-1"><a class="header-anchor" href="#ticker" aria-hidden="true">#</a> ticker</h2><p>类似游戏引擎，Layout 本身会依赖 requestAnimationFrame 维护个循环，每帧检测是否需要重渲染、重布局之类的操作。</p><h3 id="layout-ticker-add-callback-function" tabindex="-1"><a class="header-anchor" href="#layout-ticker-add-callback-function" aria-hidden="true">#</a> Layout.ticker.add(callback: Function)</h3><p>在 Layout 的循环注册个事件回调，如果 Ticker 没有暂停，回调函数每帧都会执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ball <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;ball&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">selfTickerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Layout<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>selfTickerFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layout-ticker-remove-callback-function" tabindex="-1"><a class="header-anchor" href="#layout-ticker-remove-callback-function" aria-hidden="true">#</a> Layout.ticker.remove(callback: Function)</h3><p>从 Layout 的循环移除事件回调。</p><h3 id="layout-ticker-start" tabindex="-1"><a class="header-anchor" href="#layout-ticker-start" aria-hidden="true">#</a> Layout.ticker.start()</h3><p>开始 Layout 的循环，Layout.init 之后 Layout.ticker 默认是 started 状态，不需要手动开启。</p><h3 id="layout-ticker-stop" tabindex="-1"><a class="header-anchor" href="#layout-ticker-stop" aria-hidden="true">#</a> Layout.ticker.stop()</h3><p>结束 Layout 的循环。</p><h3 id="layout-ticker-next-callback-function" tabindex="-1"><a class="header-anchor" href="#layout-ticker-next-callback-function" aria-hidden="true">#</a> Layout.ticker.next(callback: Function)</h3><p>在 Layout 的下一次循环之后执行一次事件回调。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ball <span class="token operator">=</span> Layout<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;ball&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Layout<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ball<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h2><p>Layout.use(plugin)</p><p>安装插件，详见<a href="../plugin/guide">插件文档</a>。</p><h2 id="unuse" tabindex="-1"><a class="header-anchor" href="#unuse" aria-hidden="true">#</a> unUse</h2><p>Layout.unUse(plugin)</p><p>卸载插件。</p>`,20);function I(N,E){const s=c("RouterLink");return i(),l("div",null,[d,r,k,a("p",null,[n("用于表示 Layout 的版本，与 npm 版本无关，hardcode 到源码的一个字符串，目前版本为 "),m,n("，一般而言版本跟微信小游戏"),t(s,{to:"/overview/plugin.html#%E7%89%88%E6%9C%AC%E5%88%97%E8%A1%A8"},{default:e(()=>[n("插件版本")]),_:1}),n("一一对应。")]),h,a("p",null,[n("Layout.getElementViewportRect(element: "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1}),n(")："),t(s,{to:"/components/rect.html"},{default:e(()=>[n("Rect")]),_:1})]),v,b,g,a("p",null,[n("Layout.getElementsById(string elementId): "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1}),n("[]")]),y,a("p",null,[n("Layout.getElementById(string elementId): "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1}),n(" | null")]),f,a("p",null,[n("Layout.getElementsByClassName(string className): "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1}),n("[]")]),L,a("p",null,[n("Layout.cloneNode(element: "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1}),n(", deep: boolean): "),t(s,{to:"/components/element.html"},{default:e(()=>[n("Element")]),_:1})]),_,x,w])}const C=p(u,[["render",I],["__file","api.html.vue"]]);export{C as default};
